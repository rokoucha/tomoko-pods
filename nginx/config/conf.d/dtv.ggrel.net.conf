server {
    listen 50080;
    listen [::]:50080;
    server_name dtv.ggrel.net;

    return 301 https://$host$request_uri;
}

# Proxy to OAuth2 Proxy
server {
    listen 50443 ssl http2;
    listen [::]:50443 ssl http2;
    server_name dtv.ggrel.net;

    ssl_certificate /certificates/live/ggrel.net/fullchain.pem;
    ssl_certificate_key /certificates/live/ggrel.net/privkey.pem;
    ssl_trusted_certificate /certificates/live/ggrel.net/fullchain.pem;

    ssl_dhparam /dhparam;

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;

    location /oauth2/ {
        proxy_pass http://10.0.1.5:54180;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Scheme $scheme;
        proxy_set_header X-Auth-Request-Redirect $request_uri;
        # or, if you are handling multiple domains:
        # proxy_set_header X-Auth-Request-Redirect $scheme://$host$request_uri;
    }
    location = /oauth2/auth {
        proxy_pass http://10.0.1.5:54180;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Scheme $scheme;
        # nginx auth_request includes headers but not body
        proxy_set_header Content-Length "";
        proxy_pass_request_body off;
    }

    location / {
        auth_request /oauth2/auth;
        error_page 401 = /oauth2/sign_in;

        if ( $request_method = OPTIONS ) {
            add_header Access-Control-Allow-Credentials true;
            add_header Access-Control-Allow-Headers "Origin, Authorization, Accept, Content-Type";
            add_header Access-Control-Allow-Methods "POST, GET, PUT, OPTIONS";
            add_header Access-Control-Allow-Origin *;
            add_header Content-Length 0;
            add_header Content-Type text/plain;

            return 200;
        }

        proxy_pass http://ohare.dns.ggrel.net:8888/;
    }

    location /mirakc/ {
        auth_request /oauth2/auth;
        error_page 401 = /oauth2/sign_in;

        proxy_buffer_size 32k;
        proxy_buffers 8 32K;
        proxy_busy_buffers_size 64k;
        proxy_max_temp_file_size 8192m;

        #proxy_pass http://elma.dns.ggrel.net:8080/;
        rewrite /mirakurun/(.*) https://dtv.ggrel.net/mirakurun/$1 permanent;
    }

    location = /mirakurun {
        return 301 https://dtv.ggrel.net/mirakurun/;
    }

    location /mirakurun/ {
        auth_request /oauth2/auth;
        error_page 401 = /oauth2/sign_in;

        proxy_buffer_size 32k;
        proxy_buffers 8 32K;
        proxy_busy_buffers_size 64k;
        proxy_max_temp_file_size 8192m;

        proxy_pass http://haruka.dns.ggrel.net:40772/;
    }

    location /mirakurun/api/ {
        auth_request /oauth2/auth;
        error_page 401 = /oauth2/sign_in;

        proxy_buffer_size 32k;
        proxy_buffers 8 32K;
        proxy_busy_buffers_size 64k;
        proxy_max_temp_file_size 8192m;

        proxy_pass http://haruka.dns.ggrel.net:40772/api/;
    }

    location ~ ^/api/(config|events|log|services|tuners) {
        auth_request /oauth2/auth;
        error_page 401 = /oauth2/sign_in;

        proxy_pass http://haruka.dns.ggrel.net:40772;
    }

    location /rpc {
        auth_request /oauth2/auth;
        error_page 401 = /oauth2/sign_in;

        proxy_set_header Connection "upgrade";
        proxy_set_header Upgrade $http_upgrade;

        proxy_pass http://haruka.dns.ggrel.net:40772/rpc;
    }
}